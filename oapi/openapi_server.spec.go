// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW7W4btxJ9lQF9gXsDyLu6SQsE+89xjNio0hi206SIgnh2d7SizeUw5KyUbeB3L8jV",
	"l201NVD0n7QcDs+cOTzD76ri1rElK0EV31Wo5tRi+nm0DBNuLkjIimZ7Zl0n8bvz7MiLphSFVUUh/EL9",
	"2ev4V3pHqlBBvLaNuhspT41m+xdLm9SvsU/ZapphZ0QV/385HqkZ+xZFFUpbefFcjdYptBVqyMccgSpP",
	"crQGsfecQCFotld8S/uAJCRfO+2pVsWnewU9zv8g26a+zxtwXN5QJfHcBwS+62Qvgy2FgM3wWwu16cd/",
	"PM1UoQ7ybXvyVW/yt8OGeMTqTPQe+0eVbBLvA7dO8rihfn+32u2GR2uWlr+h6dLiE5rmPC00d+Hpe/ZX",
	"pkYJ7cOEO3geVx5TaTvjQW2h8tpJEqg6gHcL8gtNy6mdWuyED6Wz9N8AN1yCDrAg30PQrTOUwZnET8JQ",
	"GUILaGtgJ7rVfxBUhrsaPAXufEUhm9qruQ4x3nEIujQEZQ8t13rWa9vAAn1Ev9oXIoiKAlRsZ7rpPEaA",
	"8SiElj0N56CBioNMbeiqOWCAOioVQ8y3uVjgUSiM1siGta8dBaEa5ujrJXoaAVksTVxk+6WmNtbSRX6z",
	"SMRx5z1ZMf0I2Joejj5cwnEE+gGlmsOEG3jjuXPwbjhkQKsDhM459kJ1SnMAp2dvTie/w8nH85OLs7cn",
	"v14dTSCHo8n56RFcCjYUwwZaPVXctmRrqkHmKCBzSgdfsCFo9IISHxJZDTyTWEakS1BbaLVN9DjyrU53",
	"dd0Ah9UtNjSAS3qIWUpPeBurr+ZoGwqAAmh70e0DAhKKxME2dYAuUA3oqZjaQzDchOK8k82lP2ejq36z",
	"9DoprqQJN4m0kKg5gFNeRijvQyIhgfXkOGhh30e8CAglVrdkB4GQT9gmsb8Cl0tsGvJw6ahK0QvUBqPO",
	"UODTXMSFIs8bLfOuzCpu8xvsD0ssu3wj87w0XOYtapszOp0L15z1rfn8v3+0/dmqwMu1GOByJe/IyT4d",
	"hakFOIQNg7CmMOU5RpOUehHLPrG1Y20lrl0Mug5QoYWSoMWaIqWkZU4eeBa7FwhotSck/g5hXd2mkkN0",
	"OnMoZG6wzzTne6Mytj7q0yc+VuAuOmsjuAlXaEw/wHIME21viyf24Yl8PxvQn3te6JpgZ2iN4MHMGsEw",
	"o+LCdnRFy3DoZcXM2heg5LrPYurrbHvaNegZ1Ly0hjHeSU+GMBDMtKEU2+Itge9sCvQrGmaeWxg8cBu0",
	"jN2+BvFY3QaYsU9JNnevSwZ2jdpfT6OzixYT7fuoE4arzkZ3X5APg2WPs3E2jhOFHVl0WhXqRfo0Ug5l",
	"nuZZjsuQG26+NFFd+cYb0+TjII8HwdtozJrCjrdt1ajtjmqzqT1eAd96rkt6vR+4I+9kOQSWofGEQj46",
	"nIXrB6+h69gdbEnSTd/ZvtQyB4TQojHkgb45vZoQNQpFJwLLMkwXncxXJX6GoLNaFWrtPpuq1DBeKcgr",
	"rtMjKpop2UQOOmd0lXbnN2EgbniK/N1DZe8LMk3gPYT3O3Tf4254KgbHNgwvlOfj8b8FcfVG24NxnxYu",
	"cUF1FvH9NEC6v+UV1rCypRT088ePj4PeW/rmqIrOSN6zz+Lhd+nVGl0+qOLTd9V5owoVjaHIcxPdZc5B",
	"ipfjl+Nc3Y12A37sZT8Kvm9p6u7z3Z8BAAD//wFAOvUdDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
