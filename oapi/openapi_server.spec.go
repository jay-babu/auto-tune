// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW7W4btxJ9lcH6AvdeQNa6TgsE+09J3NioUhu206SIgmi0O1rR5nIYzqyUbeB3L8jV",
	"hz9U1EDRf9JyODxz5vBwvmclN54dOZWs+J5JuaAG08/RSsZcX5KSU8PuzPlW43cf2FNQQykKy5JEfqHu",
	"7E38q52nrMhEg3F1djfIAtWG3V8sbVO/wS5lq2iOrdWs+OHl0SCbc2hQsyIzTl8cZ4NNCuOUagoxh1AZ",
	"SEcbEHvPERIx7K75lvYBSUi+tiZQlRWfHhT0NP+jbNv6Pm/B8eyGSo3nPiLwvNW9DDYkgnX/2yg16cd/",
	"As2zIjvId+3J173J3/Ub4hHrMzEE7J5Usk28D9wmydOGhv3danYbnqw5Wv2Gtk2Lz2iaD7Q03Mrz9+yv",
	"LBsktI8T3sPztPKYyrg592qTMhivSaDZAZwvKSwNrSZu4rBVPtTW0X8FbngGRmBJoQMxjbc0hDONn5Sh",
	"tIQO0FXAXk1j/iAoLbcVBBJuQ0kynLjrhZEY71nEzCzBrIOGKzPvjKthiSGiX++TCKIkgZLd3NRtwAgw",
	"HoXQcKD+HLRQsujESVsuAAWqqFSUmG97sSCgkgw2yPq1ry2JUgULDNUKAw2AHM5sXGT3paIm1tJGfoeR",
	"iNdtCOTUdgNgZzsYfbiC1xHoB9RyAWOu4W3g1sN5f0iP1ghI6z0HpSqlOYDTs7en49/h5OPFyeXZu5Nf",
	"r0djyGE0vjgdwZViTTGspzVQyU1DrqIKdIEKuqB08CVbgtosKfGhkVXhucYyIl2KxkFjXKLHU2hMuqub",
	"Bngsb7GmHlzSQ8wyC4S3sfpyga4mAVRA16lpHhGQUCQOdqkFWqEKMFAxcYdguZbiotXtpb9ga8puu/Qm",
	"KW5GY64TaZKoOYBTXkUo7yWRkMAG8ixGOXQRLwLCDMtbcr1AKCRs49hfhasV1jUFuPJUpuglGotRZ6jw",
	"aaHqpcjz2uiinQ1LbvIb7A5nOGvzrczzmeVZ3qBxOaM3uXLFw66xn//3j7b/f13g1UYMcLWWd+Rkn45k",
	"4gAOYcsgbChMeS5b52KvxlyitenrJXmGsXG3xTNLfWZJCfohjETahqTXfaAqokIrMA/cAIIPPDfREF51",
	"sH69BmAULPOtwJzDLgYcNlTBdB02HfaVXjPwkkIwFSWFraMHIBSFCOSWJrBryGlyitTX6cXl+c9n45Np",
	"fw8IKpLojls8Efp0uKtmCmYOFa+cZYzXKpAlFIIYnGIbvCUIrUuBYU1zKrK3sV3QKjZsChqwXJeYqttc",
	"nzZ50BRNmE6iOatRGx141CrDdeuiQS8pSO+6R8Oj4VF8FNiTQ2+yInuRPg0yj7pIT1KOK8kt11/qKJB8",
	"a2/p8WLRp17+LnqrIblnTztBGXdPeMOJe70GvrNNnyT3MPCeQpNrEDiGOhAqhWhSDqaPBpopeAzYkKbL",
	"em/7yugCEKRBaykAffNmbfIVKkUzAcfaPxAm+WeW+OmDzqqsyDYGsq0q619IEn3FVZqDoh+SS+Sg99aU",
	"aXd+Iz1x/TTxd7PG3iEwPaJ7CO/u0f2Au37aE89O+iHj+Ojo34K4HrP2YNynhStcUjWM+H7sIT3c8gor",
	"uOxpTUE/ffz4NOi9o2+eymhuFAKHYTz8Lg2e0aglKz59z9pgsyKLxlPkuY3utWDR4sXx8dHLPLv7fPdn",
	"AAAA//+fZsqmigsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
