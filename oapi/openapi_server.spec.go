// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUX0/bThD8Kqv7/aS+pLYbioT8BlSqkECV6D8kQGWxN/Yh+/a6t05IUb57dWeaAIlE",
	"X/qUy93N7szsnB9Mxb1nR06DKR9MqFrqMS0PF+GUm3NScmrZnTg/aNz3wp5ELaVbsjn/gMu0VdMMh05N",
	"+e6gmJgZS49qSmOd7k3NxOjS0/iXGhKzWq23+PaOKjWrycvenwbd2bynELAZ11apT4v/hWamNP/lG2X5",
	"o6z8bASYTU8UwWUiIfRzsEK1KS83ha93kPtTZIsOios/j4CgYl0TAf0GsHXmaPENuyEdvmrVxHihueUh",
	"/D1mtzIzSWxfFnzCZ1t5LGXdjMcZh0qsj8OJJg7Kb3Vw9CbAHd+CDTAnWUKwve8ogxONW8pQdYQO0NXA",
	"Xm1vfxFUHQ81CAUepKKQRQlWu9j4cFCGL4OLvOYkYWxWZEW2H71gTw69NaXZy4qsiGJQ2zSJHBch77j5",
	"0QgPPl+HNM2Mg25LOOPaziwFOOUGPkYUrOMH1sFxpPkdtWqzK3fcomsowLoueO5stXx+cVMqab8lcAyN",
	"ECoJaIsObl68nhvwKNiTkmRX7gl8YbUFhNBj15EA3XsrmBrXqAQosbZCP4qos6s42hjNdOmkNqU55SYV",
	"W6syYzAo6BHXy+hIxS6epSh739kqofO7MBo3PqLXntjOz0bKzg7Dl0/sfuadSbENnl0Y39a0KP4Vxcev",
	"yw6Ou7LwGedUZ5Hf+5HSc8gR1nA+2pou7V9cbF/66ujeU6VUA4mwZLF5bB9IYtBNeflgBulMaVpVX+Z5",
	"xxV2LQct96bT4iA3q+vV7wAAAP//UOlewbwFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
